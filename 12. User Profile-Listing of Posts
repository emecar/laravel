Part 1 :  Static Page
=======================

// 1. Profile  related routes
Route::get('/profile/{user}', [UserController::class, 'profile']);

// 2. Modify Controller
class UserController extends Controller
{
    public function profile() {
        return view('profile-posts');
    }

// 3. Create view/profil-posts

<x-layout>
    <div class="container py-md-5 container--narrow">
        <h2>
          <img class="avatar-small" src="https://gravatar.com/avatar/b9408a09298632b5151200f3449434ef?s=128" /> brad
          <form class="ml-2 d-inline" action="#" method="POST">
            <button class="btn btn-primary btn-sm">Follow <i class="fas fa-user-plus"></i></button>
            <!-- <button class="btn btn-danger btn-sm">Stop Following <i class="fas fa-user-times"></i></button> -->
          </form>
        </h2>
  
        <div class="profile-nav nav nav-tabs pt-2 mb-4">
          <a href="#" class="profile-nav-link nav-item nav-link active">Posts: 3</a>
          <a href="#" class="profile-nav-link nav-item nav-link">Followers: 3</a>
          <a href="#" class="profile-nav-link nav-item nav-link">Following: 2</a>
        </div>
  
        <div class="list-group">
          <a href="/post/5c3af3dcc7d0ad0004e53b3d" class="list-group-item list-group-item-action">
            <img class="avatar-tiny" src="https://gravatar.com/avatar/b9408a09298632b5151200f3449434ef?s=128" />
            <strong>Example Post #1</strong> on 0/13/2019
          </a>
          <a href="/post/5c3af3dcc7d0ad0004e53b3d" class="list-group-item list-group-item-action">
            <img class="avatar-tiny" src="https://gravatar.com/avatar/b9408a09298632b5151200f3449434ef?s=128" />
            <strong>Example Post #2</strong> on 0/13/2019
          </a>
          <a href="/post/5c3af3dcc7d0ad0004e53b3d" class="list-group-item list-group-item-action">
            <img class="avatar-tiny" src="https://gravatar.com/avatar/b9408a09298632b5151200f3449434ef?s=128" />
            <strong>Example Post #3</strong> on 0/13/2019
          </a>
        </div>
      </div>
  
</x-layout>

// 4. Test 
http://127.0.0.1:8000/profile/brad
http://127.0.0.1:8000/profile/anything  // No matter the user variable, you should get same static output page.


Part 2 : Make Page Dynamic
=============================
// Make the My Profile icon (cat image) to have the url http://127.0.0.1:8000/profile/user where the 'user' will be the logged in user.
//Go to the view/component/layout.blade.php

       @auth
        <div class="flex-row my-3 my-md-0">
          ! <Text ommitted>
          <a href="/profile/{{auth()->user()->username}}" class="mr-2"><img title="My Profile" data-toggle="tooltip" data-placement="bottom" style="width: 32px; height: 32px; border-radius: 16px" src="https://gravatar.com/avatar/f64fc44c03a8a7eb1d52502950879659?s=128" /></a>
          

//  routes file
// Since we're going to use class type hinting, we need to make the route input variable equal to the controller function input variable.
//By default the route input variable will be assumend  to the  class/table 'id' in the controller function type hinting model.
//To make the default query change from 'id' to 'username' modify the route as follows:

Route::get('/profile/{user:username}', [UserController::class, 'profile'];   

// Modify the User Controller function
// Note the variable $user must match with the route input variable 'user'
//Now we use the type hinting

public function profile(User $user) {    
        return view('profile-posts', ['username' => $user->username, 'posts' => $user->posts()->latest()->get(), 'postCount' => $user->posts()->count()]);
    }
//User Model edit:
public function posts() {
        return $this->hasMany(Post::class, 'user_id');
    }
